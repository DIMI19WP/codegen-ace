{"version":3,"sources":["utils.ts","constants.ts","createEditor.ts","addKeyShortcut.ts","main.ts"],"names":[],"mappings":";;;;;ACAA,OAAA,CAAA,OAAA,GAAe;AEAf,AFCI,ACCJ,AFFa,ECCT,EEDJ,GDEA,AFFa,CEEb,AFFa,GGAb,EFCe,CEDf,CFCiB,ACCjB,GAAe,GCFf,AHAa,CGAb,EHA6B,IEEb,GCFhB,CAAA,EHAqE,CEEtD,EAA+B,IFFjB,EAAkD,KEEhE,EAAiE,MAAjE,EDFA,ACEsF;ADGjG,ACFA,AFHgF,ECKhF,ICFM,GAAG,AFHuE,GEG9D,EDEN,EAAE,CDL0E,CEGxD,AFHyD,CEGxD,GAAjC,SFHgF,CAAuB,OAAvB,CAAA,kBCArE;AECf,AFKI,ACFA,AFJsJ,CAA7I,CCMT,EAAE,EAAE,ACFE,CCHV,CAAA,IDGgB,GCHhB,ADGmB,GCHJ,ADGO,CAAC,IAAJ,CAAS,ICHZ,GDGG,CAAf,GCHW,EAAgB;AAC3B,AFKI,EELJ,EFKI,MELI,CAAC,KFKO,EAAE,SELlB,CAA0B,OAA1B,EAAmC,UAAC,EAAD,EAAQ;AFIvC,ACDJ,AFJS,EEIT,GAAG,CAAC,CFJK,CGC6B,AHD7B,EAAA,CGC6B,EDGtC,AFJc,CGCwB,ADG1B,ECH0B,CAAA,MHDpB,GAAJ,EAAO,UEIrB;ACFI,AFHO,ADCe,CCD9B,OEGY,CHFmB,EGEhB,KAAK,CHFmB,CAAC,KGEhC,EAAqB,OAAA,AHFE,CGEF,AHF0B,GAAxB,CAAD,SGED,CAAgC,SAAhC,EAA2C,KAA3C;AACxB,ADED,AENJ,AJC4E,CAA/D,CEKT,CCJA,CCFJ,IFMU,CAAC,EENX,GAAA,GFMI,CAAgB,GENpB,CAAA,SAAA,CAAA,KFMI;ACDH,ADEG,CCNJ,CDMI,MAAM,CAAC,UAAP,GAAoB,OAApB,CAA4B,gBAA5B;AACA,AEPJ,AJCa,EEMT,EEPJ,GJCa,CEMH,AFNG,CEOJ,MERT,GAAA,CFOI,EFNS,CEQJ,EAFL,AFNyB,CEQjB,QAFR,AEPJ,CAAA,AJCiC,CEQX,IFRO,EID7B,AJCsC,CIDtC,KFSsB,QETtB,CAAA,CAAA;AFS4B,AFRe,SAAA,EEQd,MFRsB,CAAC,IEQZ,CAAC,KAAZ,GAAoB,AFRN,CAAuB,KEQX,AFRZ,CEQa,AFRb,QEQM,EAArB;AAAuC,AERnE,AJAwF,CAA3E,EEMT,CENJ,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;AFSI,EAAA,MAAM,CAAC,UAAP,CAAkB,MAAlB;AACA,AETJ,IAAA,KFSW,MAAP,KETJ,GAAA,eAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA,EAEA;AFQC,CAXD;;AEIA,IAAM,SAAS,GAAG,OAAA,CAAA,EAAA,CAAwB,QAAxB,CAAlB;AACA,IAAM,EAAE,GAAG,OAAA,CAAA,aAAA,CAA6B,cAA7B,CAAX,EAEA;;AACA,IAAM,aAAa,GAAG,OAAA,CAAA,aAAA,CAAc,UAAd,CAAtB;AACA,EAAE,CAAC,KAAH,CAAS,aAAT;AACA,IAAM,MAAM,GAAG,cAAA,CAAA,OAAA,CAAa,aAAb,EAA4B,SAA5B,EAAuC;AAClD,EAAA,UAAU,EAAE,WAAA,CAAA,OAAA,CAAU,YAD4B;AAElD,EAAA,QAAQ,EAAE,MAFwC;AAGlD,EAAA,cAAc,EAAE,IAHkC;AAIlD,EAAA,yBAAyB,EAAE,IAJuB;AAKlD,EAAA,wBAAwB,EAAE;AALwB,CAAvC,CAAf,EAQA;;AACA,IAAM,GAAG,GAAG,WAAW,CAAC,YAAA;AACpB,MAAI,EAAE,OAAA,CAAA,EAAA,CAAG,cAAH,KAAsB,OAAA,CAAA,EAAA,CAAG,QAAH,CAAxB,CAAJ,EAA2C;AAC3C,EAAA,aAAa,CAAC,GAAD,CAAb;AAEA,EAAA,OAAA,CAAA,EAAA,CAAqB,WAAA,CAAA,OAAA,CAAU,EAAV,CAAa,YAAlC,EAAgD,KAAhD;AACA,MAAM,WAAW,GAAG,OAAA,CAAA,EAAA,CAAwB,QAAxB,EAAkC,KAAtD;;AACA,MAAI,WAAJ,EAAiB;AACb,IAAA,MAAM,CAAC,QAAP,CAAgB,WAAhB;AACH,GAFD,MAEO;AACH,IAAA,MAAM,CAAC,QAAP,CAAgB,WAAA,CAAA,OAAA,CAAU,WAA1B;AACH;AACJ,CAXsB,EAWpB,IAXoB,CAAvB;AAaA,gBAAA,CAAA,OAAA,CAAW,IAAX","file":"main.js","sourceRoot":"..\\content","sourcesContent":["export const createElement = <K extends keyof HTMLElementTagNameMap>(tagName: K) => document.createElement(tagName) as unknown as HTMLElementTagNameMap[K];\r\nexport const id = <T>(_id) => (document.getElementById(_id) as unknown) as T;\r\nexport const querySelector = <T>(query) => document.querySelector(query) as unknown as T;","export default {\r\n    INIT_STRING: `#include <stdio.h>\r\nint main() {\r\n    \r\n}`,\r\n    supportFonts: `'D2Coding ligature', D2Coding, monospace`,\r\n    id: {\r\n        toggleButton: 'edit_area_toggle_checkbox_source'\r\n    }\r\n};","import { Ace, EditorOptions, Editor } from \"./types\";\r\n\r\nexport default (element: HTMLTextAreaElement, syncElement: HTMLTextAreaElement, config: EditorOptions): Editor => {\r\n    const ace: Ace = (window as any).ace\r\n    const editor = ace.edit(element);\r\n    ace.require('ace/ext/language_tools');\r\n    editor.setTheme('ace/theme/monokai');\r\n    editor.getSession().setMode('ace/mode/c_cpp');\r\n    editor\r\n        .getSession()\r\n        .on('change', () => (syncElement.value = editor.getValue()));\r\n    editor.setOptions(config);\r\n    return editor\r\n};\r\n","import { querySelector } from './utils';\r\nexport default (trigger: string) => {\r\n    document.addEventListener('keyup', ({ key }) => {\r\n        if (key === trigger) querySelector<HTMLInputElement>('#Submit').click();\r\n    });\r\n};\r\n","import { createElement, id, querySelector } from './utils';\r\nimport constants from './constants';\r\nimport createEditor from './createEditor';\r\nimport submitWith from './addKeyShortcut';\r\n\r\n// declaring basic elements from exist DOM\r\nconst rawEditor = id<HTMLTextAreaElement>('source');\r\nconst br = querySelector<HTMLBRElement>('#language+br');\r\n\r\n// setting ace editor\r\nconst editorElement = createElement('textarea');\r\nbr.after(editorElement);\r\nconst editor = createEditor(editorElement, rawEditor, {\r\n    fontFamily: constants.supportFonts,\r\n    fontSize: '18px',\r\n    enableSnippets: true,\r\n    enableBasicAutocompletion: true,\r\n    enableLiveAutocompletion: true\r\n});\r\n\r\n// Auto Enable Ace editor\r\nconst off = setInterval(() => {\r\n    if (!(id('frame_source') && id('source'))) return;\r\n    clearInterval(off);\r\n\r\n    id<HTMLInputElement>(constants.id.toggleButton).click();\r\n    const beforeValue = id<HTMLTextAreaElement>('source').value;\r\n    if (beforeValue) {\r\n        editor.setValue(beforeValue);\r\n    } else {\r\n        editor.setValue(constants.INIT_STRING);\r\n    }\r\n}, 1000);\r\n\r\nsubmitWith('F9');\r\n"]}